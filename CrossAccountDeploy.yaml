AWSTemplateFormatVersion: '2010-09-09'
Description: Cross account deploy stack.
Parameters:
  BuildAccount:
    Description: AWS AccountNumber for the Build Account
    Type: Number
  BuildAccountKMSKeyArn:
    Description: The ARN of the KMS key used in the pipeline S3 bucket(s)
    Type: String
  PipelineBucket:
    Description: The bucket used for the pipelines.
    Type: String
  SecondaryPipelineBucket:
    Description: The secondary region's Pipeline bucket. This value is required if you are using a secondary region.
    Type: String
  SecondaryCrossAccountCMK:
    Description: The secondary region's Cross Account CMK. This value is required if you are using a secondary region.
    Type: String
Conditions:
  HasSecondaryRegion:
    Fn::Not:
      - Fn::Equals:
          - ''
          - !Ref SecondaryPipelineBucket
Resources:
  CrossAccountCodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: CrossAccount-CodePipeline
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              AWS: !Ref BuildAccount
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: codepipeline.amazonaws.com
      ManagedPolicyArns:
        - !Ref CrossAccountCodePipelinePolicy

  CrossAccountCodePipelinePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: CrossAccount-CodePipeline
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'codepipeline:*'
              - 'iam:ListRoles'
              - 'cloudformation:Describe*'
              - 'cloudFormation:List*'
              - 'codebuild:BatchGetBuilds'
              - 'codebuild:StartBuild'
              - 'cloudformation:CreateStack'
              - 'cloudformation:DeleteStack'
              - 'cloudformation:DescribeStacks'
              - 'cloudformation:UpdateStack'
              - 'cloudformation:CreateChangeSet'
              - 'cloudformation:DeleteChangeSet'
              - 'cloudformation:DescribeChangeSet'
              - 'cloudformation:ExecuteChangeSet'
              - 'cloudformation:SetStackPolicy'
              - 'cloudformation:ValidateTemplate'
              - 's3:ListAllMyBuckets'
              - 's3:GetBucketLocation'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey*'
            Resource:
              - !Ref BuildAccountKMSKeyArn
              - Fn::If:
                  - HasSecondaryRegion
                  - !Ref SecondaryCrossAccountCMK
                  - !Ref AWS::NoValue
          - Action:
              - 's3:GetBucketPolicy'
              - 's3:ListBucket'
              - 's3:GetObject'
              - 's3:PutObject'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${PipelineBucket}'
              - !Sub 'arn:aws:s3:::${PipelineBucket}/*'
              - Fn::If:
                  - HasSecondaryRegion
                  - !Sub arn:aws:s3:::${SecondaryPipelineBucket}
                  - !Ref AWS::NoValue
              - Fn::If:
                  - HasSecondaryRegion
                  - !Sub 'arn:aws:s3:::${SecondaryPipelineBucket}/*'
                  - !Ref AWS::NoValue
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/CrossAccount-CodePipeline
              - !Sub arn:aws:iam::${AWS::AccountId}:role/CrossAccount-CloudFormation
          - Action:
              - iam:PassRole
            Effect: Allow
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/CrossAccount-CloudFormation

  CrossAccountCloudFormationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: CrossAccount-CloudFormation
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
      ManagedPolicyArns:
        - !Ref CrossAccountCloudFormationPolicy
        - !Ref CrossAccountDeployPolicy

  CrossAccountCloudFormationPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for Cross Account CloudFormation
      ManagedPolicyName: CrossAccount-CloudFormation
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:GetBucketAcl
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:GetObjectVersion
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${PipelineBucket}
              - !Sub arn:aws:s3:::${PipelineBucket}/*
              - Fn::If:
                  - HasSecondaryRegion
                  - !Sub arn:aws:s3:::${SecondaryPipelineBucket}
                  - !Ref AWS::NoValue
              - Fn::If:
                  - HasSecondaryRegion
                  - !Sub arn:aws:s3:::${SecondaryPipelineBucket}/*
                  - !Ref AWS::NoValue
          - Action: 'cloudformation:*'
            Effect: Allow
            Resource: '*'
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey*'
            Resource:
              - !Ref BuildAccountKMSKeyArn
              - Fn::If:
                  - HasSecondaryRegion
                  - !Ref SecondaryCrossAccountCMK
                  - !Ref AWS::NoValue

  CrossAccountDeployPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for CloudFormation to deploy resources - Change this policy to meet your needs
      ManagedPolicyName: CrossAccount-Deploy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - amplify:CreateApp
              - amplify:CreateBranch
              - amplify:CreateDeployment
              - amplify:CreateDomainAssociation
              - amplify:CreateWebHook
              - amplify:DeleteApp
              - amplify:DeleteBranch
              - amplify:DeleteDomainAssociation
              - amplify:DeleteWebHook
              - amplify:GetApp
              - amplify:GetBranch
              - amplify:GetDomainAssociation
              - amplify:GetWebHook
              - amplify:StartDeployment
              - amplify:TagResource
              - amplify:UpdateApp
              - amplify:UpdateWebHook
              - amplify:UntagResource
              - amplify:UpdateBranch
              - amplify:UpdateDomainAssociation

              - acm:AddTagsToCertificate
              - acm:DeleteCertificate
              - acm:DescribeCertificate
              - acm:GetCertificate
              - acm:List*
              - acm:RemoveTagsFromCertificate
              - acm:RenewCertificate
              - acm:RequestCertificate
              - acm:UpdateCertificateOptions

              - apigateway:*

              - cloudfront:CreateDistribution
              - cloudfront:CreateInvalidation
              - cloudfront:DeleteDistribution
              - cloudfront:GetDistribution
              - cloudfront:ListDistributions
              - cloudfront:UpdateDistribution

              - cloudwatch:DeleteAlarms
              - cloudwatch:DeleteDashboards
              - cloudwatch:Describe*
              - cloudwatch:EnableAlarmActions
              - cloudwatch:GetDashboard
              - cloudwatch:List*
              - cloudwatch:PutDashboard
              - cloudwatch:PutMetricAlarm
              - cloudwatch:TagResource
              - cloudwatch:UntagResource

              - codebuild:*

              - cognito-idp:UpdateUserPool

              - dynamodb:CreateGlobalTable
              - dynamodb:CreateTable*
              - dynamodb:DeleteTable*
              - dynamodb:Describe*
              - dynamodb:List*
              - dynamodb:TagResource
              - dynamodb:UntagResource
              - dynamodb:UpdateContinuousBackups
              - dynamodb:UpdateGlobalTable*
              - dynamodb:UpdateTable*
              - dynamodb:UpdateTimeToLive

              - es:Add*
              - es:Create*
              - es:Describe*
              - es:Delete*
              - es:Get*
              - es:List*
              - es:RemoveTags
              - es:UpdateElasticsearchDomainConfig
              - es:UpgradeElasticsearchDomain
              - es:ESHttp*

              - events:DeleteRule
              - events:DescribeRule
              - events:DisableRule
              - events:EnableRule
              - events:PutRule
              - events:PutTargets
              - events:RemoveTargets

              - firehose:CreateDeliveryStream
              - firehose:DeleteDeliveryStream
              - firehose:DescribeDeliveryStream
              - firehose:List*
              - firehose:StartDeliveryStreamEncryption
              - firehose:StopDeliveryStreamEncryption
              - firehose:TagDeliveryStream
              - firehose:UntagDeliveryStream
              - firehose:UpdateDestination

              - kinesis:PutRecords # is this right? doesn't seem like the deployment should be doing this

              - lambda:AddLayerVersionPermission
              - lambda:AddPermission
              - lambda:CreateAlias
              - lambda:CreateEventSourceMapping
              - lambda:CreateFunction
              - lambda:DeleteAlias
              - lambda:DeleteEventSourceMapping
              - lambda:DeleteFunction*
              - lambda:DeleteLayerVersion
              - lambda:DeleteProvisionedConcurrencyConfig
              - lambda:GetAccountSettings
              - lambda:GetAlias
              - lambda:GetEventSourceMapping
              - lambda:GetFunction*
              - lambda:GetLayerVersion*
              - lambda:GetPolicy
              - lambda:GetProvisionedConcurrencyConfig
              - lambda:List*
              - lambda:PublishLayerVersion
              - lambda:PublishVersion
              - lambda:PutFunctionConcurrency
              - lambda:PutFunctionEventInvokeConfig
              - lambda:PutProvisionedConcurrencyConfig
              - lambda:RemoveLayerVersionPermission
              - lambda:RemovePermission
              - lambda:TagResource
              - lambda:UntagResource
              - lambda:UpdateAlias
              - lambda:UpdateEventSourceMapping
              - lambda:UpdateFunction*

              - logs:*

              - route53:ChangeResourceRecordSets
              - route53:GetChange
              - route53:GetHostedZone
              - route53:ListHostedZones
              - route53:ListResourceRecordSets

              - s3:CreateAccessPoint
              - s3:CreateBucket
              - s3:DeleteAccessPoint*
              - s3:DeleteBucket*
              - s3:GetAccessPoint*
              - s3:GetAccountPublicAccessBlock
              - s3:Get*Configuration
              - s3:GetBucket*
              - s3:List*
              - s3:ObjectOwnerOverrideToBucketOwner
              - s3:PutAccessPointPolicy
              - s3:PutAccountPublicAccessBlock
              - s3:Put*Configuration
              - s3:PutBucket*

              - secretsmanager:CreateSecret
              - secretsmanager:DeleteResourcePolicy
              - secretsmanager:DeleteSecret
              - secretsmanager:Describe*
              - secretsmanager:GetResourcePolicy
              - secretsmanager:List*
              - secretsmanager:PutResourcePolicy
              - secretsmanager:PutSecretValue
              - secretsmanager:TagResource
              - secretsmanager:UntagResource
              - secretsmanager:UpdateSecret

              - sns:AddPermission
              - sns:ConfirmSubscription # not sure if this is needed for auto confirmed subscriptions
              - sns:CreateTopic
              - sns:DeleteTopic
              - sns:GetSubscriptionAttributes
              - sns:GetTopicAttributes
              - sns:List*
              - sns:RemovePermission
              - sns:SetSubscriptionAttributes
              - sns:SetTopicAttributes
              - sns:Subscribe
              - sns:TagResource
              - sns:Unsubscribe
              - sns:UntagResource

              - sqs:AddPermission
              - sqs:CreateQueue
              - sqs:DeleteQueue
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:List*
              - sqs:RemovePermission
              - sqs:SetQueueAttributes
              - sqs:TagQueue
              - sqs:UntagQueue

              - ssm:AddTagsToResource
              - ssm:DeleteParameter
              - ssm:Describe*
              - ssm:GetParameter
              - ssm:GetParameterHistory
              - ssm:LabelParameterVersion
              - ssm:List*
              - ssm:PutParameter
              - ssm:RemoveTagsFromResource

            Effect: Allow
            Resource:
              - '*'

          - Action:
              - iam:AddRoleToInstanceProfile
              - iam:AttachRolePolicy
              - iam:CreateInstanceProfile
              - iam:CreatePolicy
              - iam:CreatePolicyVersion
              - iam:CreateRole
              - iam:CreateServiceLinkedRole
              - iam:DeleteInstanceProfile
              - iam:DeletePolicy
              - iam:DeletePolicyVersion
              - iam:DeleteRole
              - iam:DeleteRolePolicy # inline roles - remove if not allowed
              - iam:DeleteServiceLinkedRole
              - iam:DetachRolePolicy
              - iam:GetInstanceProfile
              - iam:GetPolicy
              - iam:GetPolicyVersion
              - iam:GetRole
              - iam:GetRolePolicy # inline roles - remove if not allowed
              - iam:ListAttachedRolePolicies
              - iam:ListEntitiesForPolicy
              - iam:ListInstanceProfiles
              - iam:ListInstanceProfilesForRole
              - iam:ListPolicies
              - iam:ListPolicyVersions
              - iam:ListRolePolicies # inline roles - remove if not allowed
              - iam:ListRoleTags
              - iam:ListRoles
              - iam:PassRole
              - iam:PutRolePolicy # inline roles - remove if not allowed
              - iam:RemoveRoleFromInstanceProfile
              - iam:SetDefaultPolicyVersion
              - iam:TagRole
              - iam:UntagRole
              - iam:UpdateRole
              - iam:UpdateRoleDescription
            Effect: Allow
            Resource:
              - '*' # use a path to allow this to be more specific
Outputs:
  CrossAccountCloudFormationRoleArn:
    Description: The ARN for the cloud formation role.
    Value: !GetAtt CrossAccountCloudFormationRole.Arn
  CrossAccountCodePipelineRoleArn:
    Description: The code pipeline cloud formation role.
    Value: !GetAtt CrossAccountCodePipelineRole.Arn
