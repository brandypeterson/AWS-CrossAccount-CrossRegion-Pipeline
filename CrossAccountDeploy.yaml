AWSTemplateFormatVersion: '2010-09-09'
Description: Cross account deploy stack.
Parameters:
  BuildAccount:
    Description: AWS AccountNumber for the Build Account
    Type: Number
Resources:
  CrossAccountCodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: CrossAccountCodePipeline
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref BuildAccount
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref CrossAccountCodePipelinePolicy
  CrossAccountCodePipelinePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: CrossAccountCodePipeline
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'codebuild:*' # this is only needed if you are including a CodeBuild step in your pipeline
              - 'cloudformation:*' # we may be able to tune this down a little, but not much
              - 's3:*' # this shouldn't need * access to S3, and certainly not to all buckets
              - 'iam:PassRole' # I believe this only needs to be able to pass role to the CrossAccountCloudFormation role
              - 'lambda:invoke*' # this should only allow invoking lambda's that are being called in the pipeline - we will need a naming convention
            Resource: '*'
  CrossAccountCloudFormationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: CrossAccountCloudFormation
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
      ManagedPolicyArns:
        - !Ref CrossAccountCloudFormationPolicy
        - 'arn:aws:iam::aws:policy/AdministratorAccess' # this isn't the policy we want here - we really need to clean up the CrossAccountCloudFormationPolicy and make it do what we need it to do
  CrossAccountCloudFormationPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      #Description: Policy for Cross Account CloudFormation
      ManagedPolicyName: CrossAccountCloudFormation
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'dynamodb:CreateTable'
              - 'dynamodb:DeleteTable'
              - 'dynamodb:DescribeTable'
              - 'dynamodb:UpdateTable'
            Effect: Allow
            Resource:
              - '*'
          - Action:
              - 'route53:ChangeResourceRecordSets'
              - 'route53:ListResourceRecordSets'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'route53:GetChange'
              - 'route53:GetHostedZone'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'lambda:AddPermission'
              - 'lambda:CreateFunction'
              - 'lambda:DeleteFunction'
              - 'lambda:GetFunction'
              - 'lambda:GetFunctionConfiguration'
              - 'lambda:ListTags'
              - 'lambda:RemovePermission'
              - 'lambda:TagResource'
              - 'lambda:UntagResource'
              - 'lambda:UpdateFunction'
              - 'lambda:UpdateFunctionCode'
              - 'lambda:UpdateFunctionConfiguration'
            Effect: Allow
            Resource:
              - '*'
          - Action:
              - 'logs:CreateLogGroup'
              - 'logs:DeleteLogGroup'
              - 'logs:DeleteMetricFilter'
              - 'logs:DeleteRetentionPolicy'
              - 'logs:DeleteSubscriptionFilter'
              - 'logs:DescribeLogGroups'
              - 'logs:DescribeMetricFilters'
              - 'logs:DescribeSubscriptionFilters'
              - 'logs:FilterLogEvents'
              - 'logs:ListTagsLogGroup'
              - 'logs:PutMetricFilter'
              - 'logs:PutRetentionPolicy'
              - 'logs:PutSubscriptionFilter'
              - 'logs:TagLogGroup'
              - 'logs:UntagLogGroup'
            Effect: Allow
            Resource:
              - '*'
          - Action:
              - 'events:DeleteRule'
              - 'events:DescribeRule'
              - 'events:DisableRule'
              - 'events:EnableRule'
              - 'events:PutRule'
              - 'events:RemoveTargets'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'cloudwatch:*Alarms*'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'iam:AttachRolePolicy'
              - 'iam:CreateRole'
              - 'iam:CreateServiceLinkedRole'
              - 'iam:DeleteRole'
              - 'iam:DeleteServiceLinkedRole'
              - 'iam:DetachRolePolicy'
              - 'iam:GetRole'
              - 'iam:ListAttachedRolePolicies'
              - 'iam:ListPolicyVersions'
              - 'iam:ListRoleTags'
              - 'iam:TagRole'
              - 'iam:UntagRole'
              - 'iam:UpdateRole'
              - 'iam:UpdateRoleDescription'
            Effect: Allow
            Resource:
              - '*'
          - Action:
              - 'iam:CreatePolicy'
              - 'iam:DeletePolicy'
              - 'iam:GetPolicy'
              - 'iam:ListEntitiesForPolicy'
            Effect: Allow
            Resource:
              - '*'
          - Action: 'cloudformation:*'
            Effect: Allow
            Resource: '*'
Outputs:
  CrossAccountCloudFormationRoleArn:
    Description: The ARN for the cloud formation role.
    Value: !GetAtt CrossAccountCloudFormationRole.Arn
  CrossAccountCodePipelineRoleArn:
    Description: The code pipeline cloud formation role.
    Value: !GetAtt CrossAccountCodePipelineRole.Arn
