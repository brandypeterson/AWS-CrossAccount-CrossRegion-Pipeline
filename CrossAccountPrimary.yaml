AWSTemplateFormatVersion: '2010-09-09'
Description: Cross account primary stack.
Parameters:
  DeploymentOrgPath:
    Type: String
Resources:
  # This KMS key is for use with the cross account build/deploment. The permermissions allow the
  # CrossAccount-CodePipeline role within the deployment organization to use the key.
  KMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: Used by Assumed Roles in deploy accounts to Encrypt/Decrypt code
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: !Ref 'AWS::StackName'
        Statement:
          - Sid: Allows admin of the key
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - 'kms:*'
            Resource: '*'
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'
            Condition:
              ArnLike:
                aws:PrincipalArn: arn:aws:iam::*:role/cross-account-service-role/*
              ForAnyValue:StringLike:
                aws:PrincipalOrgPaths:
                  - !Ref DeploymentOrgPath
  KMSAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: alias/codepipeline-crossaccounts
      TargetKeyId: !Ref KMSKey

  # Topic to be used for manual intervention notification in a pipeline.
  ManualInterventionTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: Topic for pipeline manual intervention notifications
      TopicName: PipelineManualIntervention

  CrossAccountCodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: CrossAccount-CodePipeline
      Path: /cross-account-service-role/
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              AWS: !Ref AWS::AccountId
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: codepipeline.amazonaws.com
      ManagedPolicyArns:
        - !Ref CrossAccountCodePipelinePolicy

  CrossAccountCodePipelinePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: CrossAccount-CodePipeline
      Path: /cross-account-service-role/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'codepipeline:*'
              - 'iam:ListRoles'
              - 'cloudformation:Describe*'
              - 'cloudFormation:List*'
              - 'codebuild:BatchGetBuilds'
              - 'codebuild:StartBuild'
              - 'cloudformation:CreateStack'
              - 'cloudformation:DeleteStack'
              - 'cloudformation:DescribeStacks'
              - 'cloudformation:UpdateStack'
              - 'cloudformation:CreateChangeSet'
              - 'cloudformation:DeleteChangeSet'
              - 'cloudformation:DescribeChangeSet'
              - 'cloudformation:ExecuteChangeSet'
              - 'cloudformation:SetStackPolicy'
              - 'cloudformation:ValidateTemplate'
              - 's3:ListAllMyBuckets'
              - 's3:GetBucketLocation'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'kms:*'
            Resource:
              - !GetAtt KMSKey.Arn
          - Action:
              - 'sns:Publish'
            Effect: Allow
            Resource: !Ref ManualInterventionTopic
          - Action:
              - 's3:List*'
              - 's3:Get*'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${BuildBucket}'
              - !Sub 'arn:aws:s3:::${BuildBucket}/*'
          - Action:
              - 's3:*'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${PipelineBucket}'
              - !Sub 'arn:aws:s3:::${PipelineBucket}/*'
          - Action:
              - 'lambda:invoke*'
            Effect: Allow
            Resource: !GetAtt SyncArtifactsFunction.Arn
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/cross-account-service-role/CrossAccount-CodePipeline
              - !Sub arn:aws:iam::${AWS::AccountId}:role/cross-account-service-role/CrossAccount-CloudFormation
              - !Sub arn:aws:iam::${AWS::AccountId}:role/cross-account-service-role/CrossAccount-PipelineSource
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Resource:
              - arn:aws:iam::*:role/cross-account-service-role/CrossAccount-CodePipeline
              - arn:aws:iam::*:role/cross-account-service-role/CrossAccount-CloudFormation
          - Action:
              - iam:PassRole
            Effect: Allow
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/cross-account-service-role/CrossAccount-CloudFormation

  CrossAccountCloudFormationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: CrossAccount-CloudFormation
      Path: /cross-account-service-role/
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
      ManagedPolicyArns:
        - !Ref CrossAccountCloudFormationPolicy
        - !Ref CrossAccountDeployPolicy

  CrossAccountCloudFormationPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for Cross Account CloudFormation
      ManagedPolicyName: CrossAccount-CloudFormation
      Path: /cross-account-service-role/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:GetBucketAcl
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:GetObjectVersion
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${PipelineBucket}
              - !Sub arn:aws:s3:::${PipelineBucket}/*
          - Action: 'cloudformation:*'
            Effect: Allow
            Resource: '*'
          - Effect: Allow
            Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey*'
            Resource:
              - !GetAtt KMSKey.Arn

          # if using GitHub in your pipeline you should store the token in a secret named 'github-access-token'
          - Action:
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource:
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:github-access-token-*

          - Action:
              # this really only needs to do things locally, so update pipelines, and run cloudformation for those pipelines
              - cloudformation:*

              - cloudwatch:DeleteAlarms
              - cloudwatch:DeleteDashboards
              - cloudwatch:Describe*
              - cloudwatch:EnableAlarmActions
              - cloudwatch:GetDashboard
              - cloudwatch:List*
              - cloudwatch:PutDashboard
              - cloudwatch:PutMetricAlarm
              - cloudwatch:TagResource
              - cloudwatch:UntagResource

              - codebuild:*

              - codepipeline:CreatePipeline
              - codepipeline:DeletePipeline
              - codepipeline:GetPipeline
              - codepipeline:ListPipelines
              - codepipeline:StartPipelineExecution
              - codepipeline:TagResource
              - codepipeline:UntagResource
              - codepipeline:UpdatePipeline

              - events:DeleteRule
              - events:DescribeRule
              - events:DisableRule
              - events:EnableRule
              - events:PutRule
              - events:PutTargets
              - events:RemoveTargets

              - logs:*
            Effect: Allow
            Resource:
              - '*'

          - Action:
              - iam:AddRoleToInstanceProfile
              - iam:AttachRolePolicy
              - iam:CreateInstanceProfile
              - iam:CreatePolicy
              - iam:CreatePolicyVersion
              - iam:CreateRole
              - iam:CreateServiceLinkedRole
              - iam:DeleteInstanceProfile
              - iam:DeletePolicy
              - iam:DeletePolicyVersion
              - iam:DeleteRole
              - iam:DeleteRolePolicy # inline roles - remove if not allowed
              - iam:DeleteServiceLinkedRole
              - iam:DetachRolePolicy
              - iam:GetInstanceProfile
              - iam:GetPolicy
              - iam:GetPolicyVersion
              - iam:GetRole
              - iam:GetRolePolicy # inline roles - remove if not allowed
              - iam:ListAttachedRolePolicies
              - iam:ListEntitiesForPolicy
              - iam:ListInstanceProfiles
              - iam:ListInstanceProfilesForRole
              - iam:ListPolicies
              - iam:ListPolicyVersions
              - iam:ListRolePolicies # inline roles - remove if not allowed
              - iam:ListRoleTags
              - iam:ListRoles
              - iam:PassRole
              - iam:PutRolePolicy # inline roles - remove if not allowed
              - iam:RemoveRoleFromInstanceProfile
              - iam:SetDefaultPolicyVersion
              - iam:TagRole
              - iam:UntagRole
              - iam:UpdateRole
              - iam:UpdateRoleDescription
            Effect: Allow
            Resource:
              - '*' # use a path to allow this to be more specific

  CrossAccountDeployPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for CloudFormation to deploy resources - Change this policy to meet your needs
      ManagedPolicyName: CrossAccount-Deploy
      Path: /cross-account-service-role/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - amplify:CreateApp
              - amplify:CreateBranch
              - amplify:CreateDeployment
              - amplify:CreateDomainAssociation
              - amplify:CreateWebHook
              - amplify:DeleteApp
              - amplify:DeleteBranch
              - amplify:DeleteDomainAssociation
              - amplify:DeleteWebHook
              - amplify:GetApp
              - amplify:GetBranch
              - amplify:GetDomainAssociation
              - amplify:GetWebHook
              - amplify:StartDeployment
              - amplify:TagResource
              - amplify:UpdateApp
              - amplify:UpdateWebHook
              - amplify:UntagResource
              - amplify:UpdateBranch
              - amplify:UpdateDomainAssociation

              - acm:AddTagsToCertificate
              - acm:DeleteCertificate
              - acm:DescribeCertificate
              - acm:GetCertificate
              - acm:List*
              - acm:RemoveTagsFromCertificate
              - acm:RenewCertificate
              - acm:RequestCertificate
              - acm:UpdateCertificateOptions

              - apigateway:*

              - cloudfront:CreateDistribution
              - cloudfront:CreateInvalidation
              - cloudfront:DeleteDistribution
              - cloudfront:GetDistribution
              - cloudfront:ListDistributions
              - cloudfront:UpdateDistribution

              - cloudwatch:DeleteAlarms
              - cloudwatch:DeleteDashboards
              - cloudwatch:Describe*
              - cloudwatch:EnableAlarmActions
              - cloudwatch:GetDashboard
              - cloudwatch:List*
              - cloudwatch:PutDashboard
              - cloudwatch:PutMetricAlarm
              - cloudwatch:TagResource
              - cloudwatch:UntagResource

              - codebuild:*

              - cognito-idp:UpdateUserPool

              - dynamodb:CreateGlobalTable
              - dynamodb:CreateTable*
              - dynamodb:DeleteTable*
              - dynamodb:Describe*
              - dynamodb:List*
              - dynamodb:TagResource
              - dynamodb:UntagResource
              - dynamodb:UpdateContinuousBackups
              - dynamodb:UpdateGlobalTable*
              - dynamodb:UpdateTable*
              - dynamodb:UpdateTimeToLive

              - es:Add*
              - es:Create*
              - es:Describe*
              - es:Delete*
              - es:Get*
              - es:List*
              - es:RemoveTags
              - es:UpdateElasticsearchDomainConfig
              - es:UpgradeElasticsearchDomain
              - es:ESHttp*

              - events:DeleteRule
              - events:DescribeRule
              - events:DisableRule
              - events:EnableRule
              - events:PutRule
              - events:PutTargets
              - events:RemoveTargets

              - firehose:CreateDeliveryStream
              - firehose:DeleteDeliveryStream
              - firehose:DescribeDeliveryStream
              - firehose:List*
              - firehose:StartDeliveryStreamEncryption
              - firehose:StopDeliveryStreamEncryption
              - firehose:TagDeliveryStream
              - firehose:UntagDeliveryStream
              - firehose:UpdateDestination

              - kinesis:PutRecords # is this right? doesn't seem like the deployment should be doing this

              - lambda:AddLayerVersionPermission
              - lambda:AddPermission
              - lambda:CreateAlias
              - lambda:CreateEventSourceMapping
              - lambda:CreateFunction
              - lambda:DeleteAlias
              - lambda:DeleteEventSourceMapping
              - lambda:DeleteFunction*
              - lambda:DeleteLayerVersion
              - lambda:DeleteProvisionedConcurrencyConfig
              - lambda:GetAccountSettings
              - lambda:GetAlias
              - lambda:GetEventSourceMapping
              - lambda:GetFunction*
              - lambda:GetLayerVersion*
              - lambda:GetPolicy
              - lambda:GetProvisionedConcurrencyConfig
              - lambda:List*
              - lambda:PublishLayerVersion
              - lambda:PublishVersion
              - lambda:PutFunctionConcurrency
              - lambda:PutFunctionEventInvokeConfig
              - lambda:PutProvisionedConcurrencyConfig
              - lambda:RemoveLayerVersionPermission
              - lambda:RemovePermission
              - lambda:TagResource
              - lambda:UntagResource
              - lambda:UpdateAlias
              - lambda:UpdateEventSourceMapping
              - lambda:UpdateFunction*

              - logs:*

              - route53:ChangeResourceRecordSets
              - route53:GetChange
              - route53:GetHostedZone
              - route53:ListHostedZones
              - route53:ListResourceRecordSets

              - s3:CreateAccessPoint
              - s3:CreateBucket
              - s3:DeleteAccessPoint*
              - s3:DeleteBucket*
              - s3:GetAccessPoint*
              - s3:GetAccountPublicAccessBlock
              - s3:Get*Configuration
              - s3:GetBucket*
              - s3:List*
              - s3:ObjectOwnerOverrideToBucketOwner
              - s3:PutAccessPointPolicy
              - s3:PutAccountPublicAccessBlock
              - s3:Put*Configuration
              - s3:PutBucket*

              - secretsmanager:CreateSecret
              - secretsmanager:DeleteResourcePolicy
              - secretsmanager:DeleteSecret
              - secretsmanager:Describe*
              - secretsmanager:GetResourcePolicy
              - secretsmanager:List*
              - secretsmanager:PutResourcePolicy
              - secretsmanager:PutSecretValue
              - secretsmanager:TagResource
              - secretsmanager:UntagResource
              - secretsmanager:UpdateSecret

              - sns:AddPermission
              - sns:ConfirmSubscription # not sure if this is needed for auto confirmed subscriptions
              - sns:CreateTopic
              - sns:DeleteTopic
              - sns:GetSubscriptionAttributes
              - sns:GetTopicAttributes
              - sns:List*
              - sns:RemovePermission
              - sns:SetSubscriptionAttributes
              - sns:SetTopicAttributes
              - sns:Subscribe
              - sns:TagResource
              - sns:Unsubscribe
              - sns:UntagResource

              - sqs:AddPermission
              - sqs:CreateQueue
              - sqs:DeleteQueue
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:List*
              - sqs:RemovePermission
              - sqs:SetQueueAttributes
              - sqs:TagQueue
              - sqs:UntagQueue

              - ssm:AddTagsToResource
              - ssm:DeleteParameter
              - ssm:Describe*
              - ssm:GetParameter
              - ssm:GetParameterHistory
              - ssm:LabelParameterVersion
              - ssm:List*
              - ssm:PutParameter
              - ssm:RemoveTagsFromResource

            Effect: Allow
            Resource:
              - '*'

          - Action:
              - iam:AddRoleToInstanceProfile
              - iam:AttachRolePolicy
              - iam:CreateInstanceProfile
              - iam:CreatePolicy
              - iam:CreatePolicyVersion
              - iam:CreateRole
              - iam:CreateServiceLinkedRole
              - iam:DeleteInstanceProfile
              - iam:DeletePolicy
              - iam:DeletePolicyVersion
              - iam:DeleteRole
              - iam:DeleteRolePolicy # inline roles - remove if not allowed
              - iam:DeleteServiceLinkedRole
              - iam:DetachRolePolicy
              - iam:GetInstanceProfile
              - iam:GetPolicy
              - iam:GetPolicyVersion
              - iam:GetRole
              - iam:GetRolePolicy # inline roles - remove if not allowed
              - iam:ListAttachedRolePolicies
              - iam:ListEntitiesForPolicy
              - iam:ListInstanceProfiles
              - iam:ListInstanceProfilesForRole
              - iam:ListPolicies
              - iam:ListPolicyVersions
              - iam:ListRolePolicies # inline roles - remove if not allowed
              - iam:ListRoleTags
              - iam:ListRoles
              - iam:PassRole
              - iam:PutRolePolicy # inline roles - remove if not allowed
              - iam:RemoveRoleFromInstanceProfile
              - iam:SetDefaultPolicyVersion
              - iam:TagRole
              - iam:UntagRole
              - iam:UpdateRole
              - iam:UpdateRoleDescription
            Effect: Allow
            Resource:
              - '*' # use a path to allow this to be more specific

  # Role for the sync artifacts function.
  SyncArtifactsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: CrossAccount-PipelineSyncArtifacts
      Path: /cross-account-service-role/
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref SyncArtifactsPolicy
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  # This policy gives the sync artifacts function permission to decrypt with KMS key
  # and to send updates to CodePipeline.
  SyncArtifactsPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: CrossAccount-PipelineSyncArtifacts
      Path: /cross-account-service-role/
      Description: Policy for syncing artifact data for cross account pipelines
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'kms:*'
            Effect: Allow
            Resource:
              - !GetAtt KMSKey.Arn
          - Action:
              - 's3:*'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${PipelineBucket}'
              - !Sub 'arn:aws:s3:::${PipelineBucket}/*'
          - Action:
              - 'codepipeline:*' # pretty sure this doesn't need to be star.
            Effect: Allow
            Resource: '*'

  # This function takes the artifacts supplied to it and makes sure they are available in the
  # requested region. This function should be called from CodePipeline. The CodePipeline step
  # should include all the input artifacts that will be needed in the destination region.
  SyncArtifactsFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          const aws = require('aws-sdk');
          const s3 = new aws.S3({region: 'us-east-1'});
          const codepipeline = new aws.CodePipeline();
          const path = require('path');

          exports.handler = function main(event, context) {
            console.log(JSON.stringify(event));
            // Retrieve the Job ID from the Lambda action
            let jobId = event["CodePipeline.job"].id;
            try {
              let data = JSON.parse(event["CodePipeline.job"].data.actionConfiguration.configuration.UserParameters);
              let destBucket = data.DestinationBucket;

              // Make a task for each combination of record and destBucket
              let tasks = [];

              for (var i = 0; i < event["CodePipeline.job"].data.inputArtifacts.length; i++) {
                const sourceBucket = event["CodePipeline.job"].data.inputArtifacts[i].location.s3Location.bucketName;
                const sourceKey = event["CodePipeline.job"].data.inputArtifacts[i].location.s3Location.objectKey;

                if (sourceBucket != destBucket)
                  tasks.push(replicatePromise(sourceBucket, sourceKey.replace(/\+/g, " "), destBucket));
                }

              if (tasks.length != 0) {
                Promise.all(tasks)
                  .then(() => {
                    putJobSuccess(jobId, 'Successfully synced artifacts', context);
                  })
                  .catch((e) => {
                    putJobFailure(jobId, e, context);
                  });
              } else {
                putJobSuccess(jobId, 'No need to sync', context);
              }
            }
            catch(ex) {
              putJobFailure(jobId, ex, context);
            }
          };

           // Notify AWS CodePipeline of a successful job
          function putJobSuccess(jobId, message, context) {
            var params = {
              jobId: jobId
            };
            codepipeline.putJobSuccessResult(params, function(err, data) {
              if(err) {
                context.fail(err);
              }
              else {
                context.succeed(message);
              }
            });
          };

          // Notify AWS CodePipeline of a failed job
          function putJobFailure(jobId, message, context) {
            var params = {
              jobId: jobId,
              failureDetails: {
                message: JSON.stringify(message),
                type: 'JobFailed',
                externalExecutionId: context.invokeid
              }
            };
            codepipeline.putJobFailureResult(params, function(err, data) {
              context.fail(message);
            });
          };

          function replicatePromise(sourceBucket, sourceKey, destBucket) {
            return new Promise((resolve, reject) => {
              var destKey = sourceKey;
              var msg = 'copying ' + sourceBucket + ':' + sourceKey + ' to ' + destBucket + ':' + destKey;

              console.log('Attempting: ' + msg);
              s3.copyObject({
                Bucket: destBucket,
                Key: destKey,
                CopySource: encodeURIComponent(sourceBucket + '/' + sourceKey),
                MetadataDirective: 'COPY'
              }, (err, data) => {
                if (err) {
                  console.log('Error:' + msg);
                  console.log(err, err.stack); // an error occurred
                  return reject('Error:' + msg);
                } else {
                  console.log('Success: ' + msg);
                  return resolve('Success: ' + msg);
                }
              });
            });
          }

          function sleep(ms){
              return new Promise(resolve=>{
                  setTimeout(resolve,ms)
              })
          }
      Description: Makes sure the input artifacts are in the right bucket.
      FunctionName: CrossAccount-PipelineSyncArtifacts
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt SyncArtifactsRole.Arn
      Runtime: nodejs10.x
      Timeout: 30

  # Basic permissions to allow CodePipeline to call the sync function.
  SyncArtifactsLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref SyncArtifactsFunction
      Principal: codepipeline.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:*'

  # This is the bucket where build artifacts are put. CodeBuild should place things here, and
  # CodePipeline should trigger off specific artifacts.
  BuildBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt KMSKey.Arn
              SSEAlgorithm: 'aws:kms'

  # This is the bucket that is used for CodePipeline, in the primary region
  PipelineBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt KMSKey.Arn
              SSEAlgorithm: 'aws:kms'

  # Grant access to the cross account CloudFormation and CodePipeline roles within the deployment
  # organization
  PipelineBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref PipelineBucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:*'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${PipelineBucket}'
              - !Sub 'arn:aws:s3:::${PipelineBucket}/*'
            Principal: '*'
            Condition:
              ArnLike:
                aws:PrincipalArn: arn:aws:iam::*:role/cross-account-service-role/*
              ForAnyValue:StringLike:
                aws:PrincipalOrgPaths:
                  - !Ref DeploymentOrgPath

  # This role can be used as the pipeline source in any pipeline
  PipelineSourceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: CrossAccount-PipelineSource
      Path: /cross-account-service-role/
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              AWS: !Ref 'AWS::AccountId'
      ManagedPolicyArns:
        - !Ref PipelineSourcePolicy

  # This policy grants the pipeline source permission to access the S3 buckets for build and pipelines
  # as well as permission to use the KMS key, assume the CrossAccount-PipelineSource role and passrole to the CrossAccount-PipelineSource role
  PipelineSourcePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: CrossAccount-PipelineSource
      Path: /cross-account-service-role/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - cloudformation:*
            Effect: Allow
            Resource: '*'
          - Action:
              - 's3:GetBucketLocation'
              - 's3:List*'
              - 's3:Get*'
              - 's3:Put*'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${BuildBucket}'
              - !Sub 'arn:aws:s3:::${BuildBucket}/*'
              - !Sub 'arn:aws:s3:::${PipelineBucket}'
              - !Sub 'arn:aws:s3:::${PipelineBucket}/*'
          - Action:
              - 'kms:Decrypt'
              - 'kms:Encrypt'
              - 'kms:GenerateDataKey*'
            Effect: Allow
            Resource:
              - !GetAtt KMSKey.Arn
          - Action:
              - 'iam:PassRole'
            Effect: Allow
            Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/cross-account-service-role/CrossAccount-PipelineSource
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/CrossAccount-PipelineSource
          - Action:
              - lambda:InvokeFunction
            Effect: Allow
            Resource:
              - !GetAtt SyncArtifactsFunction.Arn

Outputs:
  CMK:
    Description: The CMK that is used for cross account access
    Value: !GetAtt KMSKey.Arn
    Export:
      Name: CrossAccountCMK
  BuildBucket:
    Description: The bucket for the builds
    Value: !Ref BuildBucket
    Export:
      Name: BuildBucket
  PipelineBucket:
    Description: The bucket for the pipeline
    Value: !Ref PipelineBucket
    Export:
      Name: PipelineBucket
  SyncArtifactsFunction:
    Description: The function for syncing artifacts
    Value: !Ref SyncArtifactsFunction
    Export:
      Name: SyncArtifactsFunction
  SyncArtifactsFunctionArn:
    Description: The function for syncing artifacts
    Value: !GetAtt SyncArtifactsFunction.Arn
    Export:
      Name: SyncArtifactsFunctionArn
  ManualInterventionTopicArn:
    Description: The manual intervetion topic ARN
    Value: !Ref ManualInterventionTopic
    Export:
      Name: ManualInterventionTopicArn
