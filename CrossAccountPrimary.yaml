AWSTemplateFormatVersion: '2010-09-09'
Description: Cross account primary stack.
Parameters:
  DeploymentOrgPath:
    Description: A comma separated list of OUs that can be deployed to. This OUs will have access to the pipeline artifacts.
    Type: String
Resources:
  # This KMS key is for use with the cross account build/deploment. The permissions allow the
  # CrossAccount-CodePipeline role within the deployment organization to use the key.
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Used by Assumed Roles in deploy accounts to Encrypt/Decrypt code
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: !Ref AWS::StackName
        Statement:
          - Sid: Allows admin of the key
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
            Condition:
              ArnLike:
                aws:PrincipalArn: arn:aws:iam::*:role/cross-account-service-role/*
              ForAnyValue:StringLike:
                aws:PrincipalOrgPaths:
                  Fn::Split:
                    - ','
                    - !Ref DeploymentOrgPath

  KMSAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/codepipeline-crossaccounts
      TargetKeyId: !Ref KMSKey

  # Topic to be used for manual intervention notification in a pipeline.
  ManualInterventionTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Topic for pipeline manual intervention notifications
      TopicName: PipelineManualIntervention

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CrossAccount-CodeBuild
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
      Path: /cross-account-service-role/
      ManagedPolicyArns:
        - !Ref CodeBuildPolicy

  CodeBuildPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy for Cross Account CodeBuild projects
      ManagedPolicyName: CrossAccount-CodeBuild
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
            Effect: Allow
          - Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
            Resource:
              - !Sub arn:aws:s3:::${BuildBucket}
              - !Sub arn:aws:s3:::${BuildBucket}/*
            Effect: Allow
      Path: /cross-account-service-role/

  CrossAccountUpdatePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CrossAccount-UpdatePipeline
      Path: /cross-account-service-role/
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
      ManagedPolicyArns:
        - !Ref CrossAccountUpdatePipelinePolicy

  CrossAccountUpdatePipelinePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy for Cross Account Update Pipeline
      ManagedPolicyName: CrossAccount-UpdatePipeline
      Path: /cross-account-service-role/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - codebuild:CreateProject
              - codebuild:CreateWebhook
              - codebuild:DeleteProject
              - codebuild:DeleteSourceCredentials
              - codebuild:DeleteWebhook
              - codebuild:ImportSourceCredentials
              - codebuild:InvalidateProjectCache
              - codebuild:ListProjects
              - codebuild:ListSourceCredentials
              - codebuild:PutResourcePolicy
              - codebuild:UpdateProject
              - codebuild:UpdateWebhook

              - codepipeline:CreateCustomActionType
              - codepipeline:CreatePipeline
              - codepipeline:DeleteCustomActionType
              - codepipeline:DeletePipeline
              - codepipeline:DeleteWebhook
              - codepipeline:DeregisterWebhookWithThirdParty
              - codepipeline:GetPipeline
              - codepipeline:ListActionTypes
              - codepipeline:ListPipelines
              - codepipeline:ListTagsForResource
              - codepipeline:ListWebhooks
              - codepipeline:PutActionRevision
              - codepipeline:PutWebhook
              - codepipeline:RegisterWebhookWithThirdParty
              - codepipeline:TagResource
              - codepipeline:UntagResource
              - codepipeline:UpdatePipeline
              - codepipeline:StartPipelineExecution
            Effect: Allow
            Resource:
              - '*'
          - Action:
              - iam:PassRole
            Effect: Allow
            Resource:
              - arn:aws:iam::*:role/cross-account-service-role/*

  # Role for the sync artifacts function.
  SyncArtifactsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CrossAccount-PipelineSyncArtifacts
      Path: /cross-account-service-role/
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref SyncArtifactsPolicy

  # This policy gives the sync artifacts function permission to decrypt with KMS key
  # and to send updates to CodePipeline.
  SyncArtifactsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CrossAccount-PipelineSyncArtifacts
      Path: /cross-account-service-role/
      Description: Policy for syncing artifact data for cross account pipelines
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - kms:*
            Effect: Allow
            Resource:
              - !GetAtt KMSKey.Arn
          - Action:
              - s3:*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${PipelineBucket}
              - !Sub arn:aws:s3:::${PipelineBucket}/*
          - Action:
              - codepipeline:* # pretty sure this doesn't need to be star.
            Effect: Allow
            Resource: '*'
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CrossAccountDeveloperBuildReplicationRegistration
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CrossAccountDeveloperBuildReplicationRegistration:*

  SyncArtifactsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/CrossAccount-PipelineSyncArtifacts
      RetentionInDays: 3

  # This function takes the artifacts supplied to it and makes sure they are available in the
  # requested region. This function should be called from CodePipeline. The CodePipeline step
  # should include all the input artifacts that will be needed in the destination region.
  SyncArtifactsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const aws = require('aws-sdk');
          const s3 = new aws.S3({region: 'us-east-1'});
          const codepipeline = new aws.CodePipeline();
          const path = require('path');

          exports.handler = function main(event, context) {
            console.log(JSON.stringify(event));
            // Retrieve the Job ID from the Lambda action
            let jobId = event["CodePipeline.job"].id;
            try {
              let data = JSON.parse(event["CodePipeline.job"].data.actionConfiguration.configuration.UserParameters);
              let destBucket = data.DestinationBucket;

              // Make a task for each combination of record and destBucket
              let tasks = [];

              for (var i = 0; i < event["CodePipeline.job"].data.inputArtifacts.length; i++) {
                const sourceBucket = event["CodePipeline.job"].data.inputArtifacts[i].location.s3Location.bucketName;
                const sourceKey = event["CodePipeline.job"].data.inputArtifacts[i].location.s3Location.objectKey;

                if (sourceBucket != destBucket)
                  tasks.push(replicatePromise(sourceBucket, sourceKey.replace(/\+/g, " "), destBucket));
                }

              if (tasks.length != 0) {
                Promise.all(tasks)
                  .then(() => {
                    putJobSuccess(jobId, 'Successfully synced artifacts', context);
                  })
                  .catch((e) => {
                    putJobFailure(jobId, e, context);
                  });
              } else {
                putJobSuccess(jobId, 'No need to sync', context);
              }
            }
            catch(ex) {
              putJobFailure(jobId, ex, context);
            }
          };

           // Notify AWS CodePipeline of a successful job
          function putJobSuccess(jobId, message, context) {
            var params = {
              jobId: jobId
            };
            codepipeline.putJobSuccessResult(params, function(err, data) {
              if(err) {
                context.fail(err);
              }
              else {
                context.succeed(message);
              }
            });
          };

          // Notify AWS CodePipeline of a failed job
          function putJobFailure(jobId, message, context) {
            var params = {
              jobId: jobId,
              failureDetails: {
                message: JSON.stringify(message),
                type: 'JobFailed',
                externalExecutionId: context.invokeid
              }
            };
            codepipeline.putJobFailureResult(params, function(err, data) {
              context.fail(message);
            });
          };

          function replicatePromise(sourceBucket, sourceKey, destBucket) {
            return new Promise((resolve, reject) => {
              var destKey = sourceKey;
              var msg = 'copying ' + sourceBucket + ':' + sourceKey + ' to ' + destBucket + ':' + destKey;

              console.log('Attempting: ' + msg);
              s3.copyObject({
                Bucket: destBucket,
                Key: destKey,
                CopySource: encodeURIComponent(sourceBucket + '/' + sourceKey),
                MetadataDirective: 'COPY'
              }, (err, data) => {
                if (err) {
                  console.log('Error:' + msg);
                  console.log(err, err.stack); // an error occurred
                  return reject('Error:' + msg);
                } else {
                  console.log('Success: ' + msg);
                  return resolve('Success: ' + msg);
                }
              });
            });
          }

          function sleep(ms){
              return new Promise(resolve=>{
                  setTimeout(resolve,ms)
              })
          }
      Description: Makes sure the input artifacts are in the right bucket.
      FunctionName: CrossAccount-PipelineSyncArtifacts
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt SyncArtifactsRole.Arn
      Runtime: nodejs10.x
      Timeout: 30

  # Basic permissions to allow CodePipeline to call the sync function.
  SyncArtifactsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SyncArtifactsFunction
      Principal: codepipeline.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:*

  # This is the bucket where build artifacts are put. CodeBuild should place things here, and
  # CodePipeline should trigger off specific artifacts.
  BuildBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt KMSKey.Arn
              SSEAlgorithm: aws:kms

  # This is the bucket that is used for CodePipeline, in the primary region
  PipelineBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt KMSKey.Arn
              SSEAlgorithm: aws:kms

  # Grant access to the cross account CloudFormation and CodePipeline roles within the deployment
  # organization
  PipelineBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PipelineBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${PipelineBucket}
              - !Sub arn:aws:s3:::${PipelineBucket}/*
            Principal: '*'
            Condition:
              ArnLike:
                aws:PrincipalArn: arn:aws:iam::*:role/cross-account-service-role/*
              ForAnyValue:StringLike:
                aws:PrincipalOrgPaths:
                  Fn::Split:
                    - ','
                    - !Ref DeploymentOrgPath

  # This role can be used as the pipeline source in any pipeline
  PipelineSourceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CrossAccount-PipelineSource
      Path: /cross-account-service-role/
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
      ManagedPolicyArns:
        - !Ref PipelineSourcePolicy

  # This policy grants the pipeline source permission to access the S3 buckets for build and pipelines
  # as well as permission to use the KMS key, assume the CrossAccount-PipelineSource role and passrole to the CrossAccount-PipelineSource role
  PipelineSourcePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CrossAccount-PipelineSource
      Path: /cross-account-service-role/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - cloudformation:*
            Effect: Allow
            Resource: '*'
          - Action:
              - s3:GetBucketLocation
              - s3:List*
              - s3:Get*
              - s3:Put*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${BuildBucket}
              - !Sub arn:aws:s3:::${BuildBucket}/*
              - !Sub arn:aws:s3:::${PipelineBucket}
              - !Sub arn:aws:s3:::${PipelineBucket}/*
          - Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey*
            Effect: Allow
            Resource:
              - !GetAtt KMSKey.Arn
          - Action:
              - iam:PassRole
            Effect: Allow
            Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/cross-account-service-role/CrossAccount-PipelineSource
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/CrossAccount-PipelineSource
          - Action:
              - lambda:InvokeFunction
            Effect: Allow
            Resource:
              - !GetAtt SyncArtifactsFunction.Arn

Outputs:
  CMK:
    Description: The CMK that is used for cross account access
    Value: !GetAtt KMSKey.Arn
    Export:
      Name: CrossAccountCMK
  BuildBucket:
    Description: The bucket for the builds
    Value: !Ref BuildBucket
    Export:
      Name: BuildBucket
  PipelineBucket:
    Description: The bucket for the pipeline
    Value: !Ref PipelineBucket
    Export:
      Name: PipelineBucket
  SyncArtifactsFunction:
    Description: The function for syncing artifacts
    Value: !Ref SyncArtifactsFunction
    Export:
      Name: SyncArtifactsFunction
  SyncArtifactsFunctionArn:
    Description: The function for syncing artifacts
    Value: !GetAtt SyncArtifactsFunction.Arn
    Export:
      Name: SyncArtifactsFunctionArn
  ManualInterventionTopicArn:
    Description: The manual intervetion topic ARN
    Value: !Ref ManualInterventionTopic
    Export:
      Name: ManualInterventionTopicArn
  PipelineSourceRoleArn:
    Description: The ARN of the pipeline source role
    Value: !GetAtt PipelineSourceRole.Arn
