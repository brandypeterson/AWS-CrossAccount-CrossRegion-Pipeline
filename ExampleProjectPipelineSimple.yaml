AWSTemplateFormatVersion: '2010-09-09'
Description: Continuous integration project for ExampleProject
Parameters:
  GitHubUrl:
    Description: The HTTPS URL for GitHub for the project
    Type: String
  Regions:
    Type: CommaDelimitedList
  Accounts:
    Type: CommaDelimitedList
  Names:
    Type: CommaDelimitedList
  SecondaryRegion:
    Description: The secondary region that you deploy to. This value is required if any deployment region is different than the region of this stack.
    Type: String
  SecondaryPipelineBucket:
    Description: The secondary region's Pipeline bucket. This value is required if you are using a secondary region.
    Type: String
  SecondaryCrossAccountCMK:
    Description: The secondary region's Cross Account CMK. This value is required if you are using a secondary region.
    Type: String
  DeveloperAccount:
    Type: String
    AllowedValues:
      - true
      - false
    Default: true
Conditions:
  HasSecondaryRegion:
    Fn::Not:
      - Fn::Equals:
          - ''
          - !Ref SecondaryRegion
  IsDeveloperAccount:
    Fn::Equals:
      - true
      - !Ref DeveloperAccount
Resources:
  CodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/codebuild/ExampleProject-Test
      RetentionInDays: 3

  CodeBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Description: Continuous integration build for ExampleProject
      Name: ExampleProject-Test
      Artifacts:
        Type: S3
        Packaging: ZIP
        Location: !ImportValue BuildBucket
        Name: ExampleProject-Test.zip # it is important that this name is NOT the same as the other build because that one will kick off a deploy
        OverrideArtifactName: false
        Path: ExampleProject
      SecondaryArtifacts:
        - ArtifactIdentifier: LambdaFunction
          Type: S3
          Packaging: ZIP
          Location: !ImportValue BuildBucket
          Name: ExampleProject.LambdaFunction-Test.zip # it is important that this name is NOT the same as the other build because that one will be used in a deploy
          OverrideArtifactName: false
          Path: ExampleProject/LambdaFunction
      ServiceRole: !Sub arn:aws:iam::${AWS::AccountId}:role/cross-account-service-role/CrossAccount-CodeBuild
      Environment:
        Type: LINUX_CONTAINER
        Image: 'aws/codebuild/dot-net:core-2.1'
        PrivilegedMode: true
        ComputeType: BUILD_GENERAL1_SMALL
      Triggers:
        Webhook:
          Fn::If:
            - IsDeveloperAccount
            - false
            - true
      Source:
        Auth:
          Type: OAUTH
        Type: GITHUB
        BuildSpec: buildspec.yml
        Location: !Ref GitHubUrl
        ReportBuildStatus: true

  CodeBuildDeployLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/codebuild/ExampleProject-Deploy
      RetentionInDays: 3

  CodeBuildDeployProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Description: Deploy build for ExampleProject
      Name: ExampleProject-Deploy
      Artifacts:
        Type: S3
        Packaging: ZIP
        Location: !ImportValue BuildBucket
        Name: ExampleProject.zip
        OverrideArtifactName: false
        Path: ExampleProject
      SecondaryArtifacts:
        - ArtifactIdentifier: LambdaFunction
          Type: S3
          Packaging: ZIP
          Location: !ImportValue BuildBucket
          Name: ExampleProject.LambdaFunction.zip
          OverrideArtifactName: false
          Path: ExampleProject/LambdaFunction
      ServiceRole: !Sub arn:aws:iam::${AWS::AccountId}:role/cross-account-service-role/CrossAccount-CodeBuild
      Environment:
        Type: LINUX_CONTAINER
        Image: 'aws/codebuild/dot-net:core-2.1'
        PrivilegedMode: true
        ComputeType: BUILD_GENERAL1_SMALL
      Triggers:
        Webhook:
          Fn::If:
            - IsDeveloperAccount
            - false
            - true
        FilterGroups:
          Fn::If:
            - IsDeveloperAccount
            - !Ref AWS::NoValue
            - - - Type: EVENT
                  Pattern: PUSH
                - Type: HEAD_REF
                  Pattern: ^refs/heads/master$
      Source:
        Auth:
          Type: OAUTH
        Type: GITHUB
        BuildSpec: buildspec.yml
        Location: !Ref GitHubUrl
        ReportBuildStatus: true
  Pipeline:
    Fn::Transform:
      Name: CrossAccount-PipelineHelperMacro
      Parameters:
        DuplicateStages:
          - Deploy
        DuplicateNameFormat: Deploy-{NAME}
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: ExampleProject
      RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/cross-account-service-role/CrossAccount-CodePipeline
      RestartExecutionOnUpdate: true
      ArtifactStores:
        - ArtifactStore:
            Location: !ImportValue PipelineBucket
            Type: S3
            EncryptionKey:
              Id: !ImportValue CrossAccountCMK
              Type: KMS
          Region: !Ref AWS::Region
        - Fn::If:
            - HasSecondaryRegion
            - ArtifactStore:
                Location: !Ref SecondaryPipelineBucket
                Type: S3
                EncryptionKey:
                  Id: !Ref SecondaryCrossAccountCMK
                  Type: KMS
              Region: !Ref SecondaryRegion
            - !Ref AWS::NoValue
      Stages:
        - Name: Source
          Actions:
            - Name: PrimarySource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: !ImportValue BuildBucket
                S3ObjectKey: ExampleProject/ExampleProject.zip
                PollForSourceChanges: 'true'
              OutputArtifacts:
                - Name: PrimaryOutput
              RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/cross-account-service-role/CrossAccount-PipelineSource
              RunOrder: 1
            - Name: LambdaSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: !ImportValue BuildBucket
                S3ObjectKey: ExampleProject/LambdaFunction/ExampleProject.LambdaFunction.zip
                PollForSourceChanges: 'false'
              OutputArtifacts:
                - Name: LambdaOutput
              RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/cross-account-service-role/CrossAccount-PipelineSource
              RunOrder: 1
        - Name: PreDeploy
          Actions:
            - Name: CreateUpdatePipelineChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ChangeSetName: DeployChangeSet
                ActionMode: CHANGE_SET_REPLACE
                StackName: ExampleProject-Pipeline
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: 'PrimaryOutput::ExampleProjectPipelineSimple.yaml'
                ParameterOverrides:
                  Fn::Sub:
                    - |
                      {
                        "GitHubUrl": "${GitHubUrl}",
                        "Regions": "${Regions}",
                        "Accounts": "${Accounts}",
                        "Names": "${Names}",
                        "SecondaryRegion": "${SecondaryRegion}",
                        "SecondaryPipelineBucket": "${SecondaryPipelineBucket}",
                        "SecondaryCrossAccountCMK": "${SecondaryCrossAccountCMK}",
                        "DeveloperAccount": "${DeveloperAccount}"
                      }
                    - Accounts:
                        Fn::Join:
                          - ','
                          - !Ref Accounts
                      Regions:
                        Fn::Join:
                          - ','
                          - !Ref Regions
                      Names:
                        Fn::Join:
                          - ','
                          - !Ref Names

                RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/cross-account-service-role/CrossAccount-UpdatePipeline'
              InputArtifacts:
                - Name: PrimaryOutput
              Region: !Ref AWS::Region
              RunOrder: 1
              RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/cross-account-service-role/CrossAccount-CodePipeline'
            - Name: ExecuteUpdatePipelineChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ChangeSetName: DeployChangeSet
                ActionMode: CHANGE_SET_EXECUTE
                StackName: ExampleProject-Pipeline
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/cross-account-service-role/CrossAccount-UpdatePipeline'
              Region: !Ref AWS::Region
              RunOrder: 2
              RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/cross-account-service-role/CrossAccount-CodePipeline'
            - Fn::If:
                - HasSecondaryRegion
                - Name: SyncSecondaryArtifacts
                  ActionTypeId:
                    Category: Invoke
                    Owner: AWS
                    Provider: Lambda
                    Version: '1'
                  Configuration:
                    FunctionName: !ImportValue SyncArtifactsFunction
                    UserParameters: !Sub '{ "DestinationBucket": "${SecondaryPipelineBucket}" }'
                  InputArtifacts:
                    - Name: PrimaryOutput
                    - Name: LambdaOutput
                  RunOrder: 3
                  RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/cross-account-service-role/CrossAccount-PipelineSource
                - !Ref AWS::NoValue
        - Name: Deploy
          Actions:
            - Name: Init-DeployPermissions
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ChangeSetName: DeployChangeSet
                ActionMode: CHANGE_SET_REPLACE
                StackName: ExampleProject-DeployPermissions
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: 'PrimaryOutput::ExampleProjectDeployPermissions.yaml'
                RoleArn: arn:aws:iam::{ACCOUNT_ID}:role/cross-account-service-role/CrossAccount-CloudFormation-PolicyBuilder
              InputArtifacts:
                - Name: PrimaryOutput
              Region: '{REGION}'
              RunOrder: 1
              RoleArn: arn:aws:iam::{ACCOUNT_ID}:role/cross-account-service-role/CrossAccount-CodePipeline
            - Name: Exec-DeployPermissions
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ChangeSetName: DeployChangeSet
                ActionMode: CHANGE_SET_EXECUTE
                StackName: ExampleProject-DeployPermissions
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: arn:aws:iam::{ACCOUNT_ID}:role/cross-account-service-role/CrossAccount-CloudFormation-PolicyBuilder
              Region: '{REGION}'
              RunOrder: 2
              RoleArn: arn:aws:iam::{ACCOUNT_ID}:role/cross-account-service-role/CrossAccount-CodePipeline
            - Name: CreatePrimaryChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ChangeSetName: DeployChangeSet
                ActionMode: CHANGE_SET_REPLACE
                StackName: ExampleProject
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: 'PrimaryOutput::ExampleProject.yaml'
                RoleArn: arn:aws:iam::{ACCOUNT_ID}:role/cross-account-service-role/ExampleProject-DeployPermissions
              InputArtifacts:
                - Name: PrimaryOutput
              Region: '{REGION}'
              RunOrder: 3
              RoleArn: arn:aws:iam::{ACCOUNT_ID}:role/cross-account-service-role/CrossAccount-CodePipeline
            - Name: ExecutePrimaryChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ChangeSetName: DeployChangeSet
                ActionMode: CHANGE_SET_EXECUTE
                StackName: ExampleProject
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: arn:aws:iam::{ACCOUNT_ID}:role/cross-account-service-role/ExampleProject-DeployPermissions
              Region: '{REGION}'
              RunOrder: 4
              RoleArn: arn:aws:iam::{ACCOUNT_ID}:role/cross-account-service-role/CrossAccount-CodePipeline
            - Name: CreateLambdaChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ChangeSetName: DeployChangeSet
                ActionMode: CHANGE_SET_REPLACE
                StackName: ExampleProject-LambdaFunction
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: 'LambdaOutput::deploy.yaml'
                ParameterOverrides: |
                  {
                    "BucketName": {
                      "Fn::GetArtifactAtt": [
                        "LambdaOutput",
                        "BucketName"
                      ]
                    },
                    "ObjectKey": {
                      "Fn::GetArtifactAtt": [
                        "LambdaOutput",
                        "ObjectKey"
                      ]
                    }
                  }
                RoleArn: arn:aws:iam::{ACCOUNT_ID}:role/cross-account-service-role/ExampleProject-DeployPermissions
              InputArtifacts:
                - Name: LambdaOutput
              Region: '{REGION}'
              RunOrder: 3
              RoleArn: arn:aws:iam::{ACCOUNT_ID}:role/cross-account-service-role/CrossAccount-CodePipeline
            - Name: ExecuteLambdaChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ChangeSetName: DeployChangeSet
                ActionMode: CHANGE_SET_EXECUTE
                StackName: ExampleProject-LambdaFunction
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: arn:aws:iam::{ACCOUNT_ID}:role/cross-account-service-role/ExampleProject-DeployPermissions
              Region: '{REGION}'
              RunOrder: 4
              RoleArn: arn:aws:iam::{ACCOUNT_ID}:role/cross-account-service-role/CrossAccount-CodePipeline
