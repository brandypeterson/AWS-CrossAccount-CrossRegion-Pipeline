{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Creates a CMK in KMS and grants access to other accounts",
    "Parameters": {
        "RootAccountArns": {
            "Description": "A comma separated list of ARNs representing the root accounts for deployment (arn:aws:iam::${AccountId}:root). This should include the build account.",
            "Type": "String"
        },
        "DeployReady": {
            "Description": "Conditionally adds deploy ready settings",
            "Type": "String",
            "Default": "false",
            "AllowedValues": [
                "true",
                "false"
            ]
        },
        "ArtifactBucketAccessRoleArns": {
            "Description": "A comma separated list of ARNs representing the roles for that should have access to the artifact bucket. This typically includes the 'CrossAccountCodePipelineCloudFormation' (arn:aws:iam::${AccountId}:role/CrossAccountCodePipelineCloudFormation) and 'CrossAccountCloudFormation' (arn:aws:iam::${AccountId}:role/CrossAccountCloudFormation) roles. May include the 'CrossAccountPipelineS3Replication' from the 'real' build account if this is a private stack.",
            "Type": "String"
        },
        "BuildS3Bucket": {
            "Description": "The S3 bucket that is created by this stack. This is only used if there is going to be bucket replication, and is a parameter in order to allow a policy to be created for replication and used by the bucket.",
            "Type": "String"
        },
        "Replication": {
            "Description": "Conditionally configures replication of the S3 bucket.",
            "Type": "String",
            "Default": "false",
            "AllowedValues": [
                "true",
                "false"
            ]
        },
        "ReplicationBucketList": {
            "Type": "String",
            "Description": "A comma separated list of the replication buckets"
        },
        "ReplicationBucketStarArns": {
            "Type": "String",
            "Description": "A comma separated list of the replication bucket ARNs with full wildcard access (arn:aws:s3:::bucketName/*)"
        },
        "ReplicationCMKs": {
            "Type": "String",
            "Description": "A comma separated list of the CMKs for the replication buckets."
        }
    },
    "Conditions": {
        "AddS3Policy": {
            "Fn::Equals": [
                {
                    "Ref": "DeployReady"
                },
                "true"
            ]
        },
        "Replicate": {
            "Fn::Equals": [
                {
                    "Ref": "Replication"
                },
                "true"
            ]
        }
    },
    "Resources": {
        "KMSKey": {
            "Type": "AWS::KMS::Key",
            "Properties": {
                "Description": "Used by Assumed Roles in deploy accounts to Encrypt/Decrypt code",
                "EnableKeyRotation": true,
                "KeyPolicy": {
                    "Version": "2012-10-17",
                    "Id": {
                        "Ref": "AWS::StackName"
                    },
                    "Statement": [
                        {
                            "Sid": "Allows admin of the key",
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:root"
                                }
                            },
                            "Action": [
                                "kms:Create*",
                                "kms:Describe*",
                                "kms:Enable*",
                                "kms:List*",
                                "kms:Put*",
                                "kms:Update*",
                                "kms:Revoke*",
                                "kms:Disable*",
                                "kms:Get*",
                                "kms:Delete*",
                                "kms:ScheduleKeyDeletion",
                                "kms:CancelKeyDeletion"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Fn::Split": [
                                        ",",
                                        {
                                            "Ref": "RootAccountArns"
                                        }
                                    ]
                                }
                            },
                            "Action": [
                                "kms:Encrypt",
                                "kms:Decrypt",
                                "kms:ReEncrypt*",
                                "kms:GenerateDataKey*",
                                "kms:DescribeKey"
                            ],
                            "Resource": "*"
                        }
                    ]
                }
            }
        },
        "KMSAlias": {
            "Type": "AWS::KMS::Alias",
            "Properties": {
                "AliasName": "alias/codepipeline-crossaccounts",
                "TargetKeyId": {
                    "Ref": "KMSKey"
                }
            }
        },
        "ReplicationRole": {
            "Type": "AWS::IAM::Role",
            "Condition": "Replicate",
            "Properties": {
                "RoleName": "CrossAccountPipelineS3Replication",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    {
                        "Ref": "ReplicationPolicy"
                    },
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ]
            }
        },
        "ReplicationPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Condition": "Replicate",
            "Properties": {
                "ManagedPolicyName": "CrossAccountPipelineS3Replication",
                "Description": "Policy for replicating S3 data for the cross account pipeline",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "s3:ListBucket"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Sub": "arn:aws:s3:::${BuildS3Bucket}"
                                }
                            ]
                        },
                        {
                            "Action": [
                                "s3:Get*"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Sub": "arn:aws:s3:::${BuildS3Bucket}/*"
                                }
                            ]
                        },
                        {
                            "Action": [
                                "kms:Decrypt"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::GetAtt": [
                                        "KMSKey",
                                        "Arn"
                                    ]
                                }
                            ]
                        },
                        {
                            "Action": [
                                "s3:Put*"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Split": [
                                    ",",
                                    {
                                        "Ref": "ReplicationBucketStarArns"
                                    }
                                ]
                            }
                        },
                        {
                            "Action": [
                                "kms:Encrypt"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Split": [
                                    ",",
                                    {
                                        "Ref": "ReplicationCMKs"
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        "ReplicationFunction": {
            "Type": "AWS::Lambda::Function",
            "Condition": "Replicate",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "const aws = require('aws-sdk');",
                                "const s3 = new aws.S3({region: 'us-east-1'});",
                                "const path = require('path');",
                                "",
                                "const destBuckets = process.env.DEST_BUCKETS.split(',');",
                                "",
                                "exports.handler = function main(event, context) {",
                                "  // Fail on mising data",
                                "  if (!destBuckets) {",
                                "    context.fail('Error: Environment variable DEST_BUCKETS missing');",
                                "    return;",
                                "  }",
                                "  if (event.Records === null) {",
                                "    context.fail('Error: Event has no records.');",
                                "    return;",
                                "  }",
                                "  // Make a task for each combination of record and destBucket",
                                "  let tasks = [];",
                                "  for (let i = 0; i < event.Records.length; i++) {",
                                "    for (let j = 0; j < destBuckets.length; j++) {",
                                "      tasks.push(replicatePromise(event.Records[i], destBuckets[j]));",
                                "    }",
                                "  }",
                                "",
                                "  Promise.all(tasks)",
                                "    .then(() => { context.succeed();",
                                "    })",
                                "    .catch(() => { context.fail();",
                                "    });",
                                "};",
                                "",
                                "function replicatePromise(record, destBucket) {",
                                "  return new Promise((resolve, reject) => {",
                                "    // The source bucket and source key are part of the event data",
                                "    var srcBucket = record.s3.bucket.name;",
                                "    var srcKey = decodeURIComponent(record.s3.object.key.replace(/\\+/g,\" \"));",
                                "",
                                "    // Modify destKey if an alternate copy location is preferred",
                                "    var destKey = srcKey;",
                                "    var msg = 'copying ' + srcBucket + ':' + srcKey + ' to ' + destBucket + ':' + destKey;",
                                "",
                                "    console.log('Attempting: ' + msg);",
                                "    s3.copyObject({",
                                "      Bucket: destBucket,",
                                "      Key: destKey,",
                                "      CopySource: encodeURIComponent(srcBucket + '/' + srcKey),",
                                "      MetadataDirective: 'COPY'",
                                "    }, (err, data) => {",
                                "      if (err) {",
                                "        console.log('Error:' + msg);",
                                "        console.log(err, err.stack); // an error occurred",
                                "        return reject('Error:' + msg);",
                                "      } else {",
                                "        console.log('Success: ' + msg);",
                                "        return resolve('Success: ' + msg);",
                                "      }",
                                "    });",
                                "  });",
                                "}"
                            ]
                        ]
                    }
                },
                "Description": "Copies data from on S3 bucket to a list of destination buckets.",
                "Environment": {
                    "Variables": {
                        "DEST_BUCKETS": {
                            "Ref": "ReplicationBucketList"
                        }
                    }
                },
                "FunctionName": "S3DataReplicator",
                "Handler": "index.handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "ReplicationRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs8.10",
                "Timeout": 30
            }
        },
        "ReplicationLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Condition": "Replicate",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Ref": "ReplicationFunction"
                },
                "Principal": "s3.amazonaws.com",
                "SourceAccount": {
                    "Ref": "AWS::AccountId"
                },
                "SourceArn": {
                    "Fn::Sub": "arn:aws:s3:::${BuildS3Bucket}"
                }
            }
        },
        "ArtifactBucket": {
            "Type": "AWS::S3::Bucket",
            "DeletionPolicy": "Retain",
            "Properties": {
                "VersioningConfiguration": {
                    "Status": "Enabled"
                },
                "NotificationConfiguration": {
                    "Fn::If": [
                        "Replicate",
                        {
                            "LambdaConfigurations": [
                                {
                                    "Event": "s3:ObjectCreated:*",
                                    "Function": {
                                        "Fn::GetAtt": [
                                            "ReplicationFunction",
                                            "Arn"
                                        ]
                                    }
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                }
            }
        },
        "S3BucketPolicy": {
            "Condition": "AddS3Policy",
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "ArtifactBucket"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "s3:*"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Sub": "arn:aws:s3:::${ArtifactBucket}"
                                },
                                {
                                    "Fn::Sub": "arn:aws:s3:::${ArtifactBucket}/*"
                                }
                            ],
                            "Principal": {
                                "AWS": {
                                    "Fn::Split": [
                                        ",",
                                        {
                                            "Ref": "ArtifactBucketAccessRoleArns"
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        }
    },
    "Outputs": {
        "CMK": {
            "Description": "The CMK that is used for cross account access",
            "Value": {
                "Fn::GetAtt": [
                    "KMSKey",
                    "Arn"
                ]
            }
        },
        "ArtifactBucket": {
            "Description": "The bucket for artifacts",
            "Value": {
                "Ref": "ArtifactBucket"
            }
        }
    }
}